/**
 */
package neuralnetwork.neuralnetwork.provider;

import java.util.ArrayList;
import java.util.Collection;

import neuralnetwork.neuralnetwork.util.NeuralnetworkAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NeuralnetworkItemProviderAdapterFactory extends NeuralnetworkAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NeuralnetworkItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Dense} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DenseItemProvider denseItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Dense}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDenseAdapter() {
		if (denseItemProvider == null) {
			denseItemProvider = new DenseItemProvider(this);
		}

		return denseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Concatenate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcatenateItemProvider concatenateItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Concatenate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcatenateAdapter() {
		if (concatenateItemProvider == null) {
			concatenateItemProvider = new ConcatenateItemProvider(this);
		}

		return concatenateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Embedding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmbeddingItemProvider embeddingItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Embedding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmbeddingAdapter() {
		if (embeddingItemProvider == null) {
			embeddingItemProvider = new EmbeddingItemProvider(this);
		}

		return embeddingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.GRU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GRUItemProvider gruItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.GRU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGRUAdapter() {
		if (gruItemProvider == null) {
			gruItemProvider = new GRUItemProvider(this);
		}

		return gruItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Dropout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropoutItemProvider dropoutItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Dropout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropoutAdapter() {
		if (dropoutItemProvider == null) {
			dropoutItemProvider = new DropoutItemProvider(this);
		}

		return dropoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.Bidirectional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BidirectionalItemProvider bidirectionalItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.Bidirectional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBidirectionalAdapter() {
		if (bidirectionalItemProvider == null) {
			bidirectionalItemProvider = new BidirectionalItemProvider(this);
		}

		return bidirectionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link neuralnetwork.neuralnetwork.CustomLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomLayerItemProvider customLayerItemProvider;

	/**
	 * This creates an adapter for a {@link neuralnetwork.neuralnetwork.CustomLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomLayerAdapter() {
		if (customLayerItemProvider == null) {
			customLayerItemProvider = new CustomLayerItemProvider(this);
		}

		return customLayerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (modelItemProvider != null)
			modelItemProvider.dispose();
		if (inputItemProvider != null)
			inputItemProvider.dispose();
		if (denseItemProvider != null)
			denseItemProvider.dispose();
		if (concatenateItemProvider != null)
			concatenateItemProvider.dispose();
		if (embeddingItemProvider != null)
			embeddingItemProvider.dispose();
		if (gruItemProvider != null)
			gruItemProvider.dispose();
		if (dropoutItemProvider != null)
			dropoutItemProvider.dispose();
		if (bidirectionalItemProvider != null)
			bidirectionalItemProvider.dispose();
		if (customLayerItemProvider != null)
			customLayerItemProvider.dispose();
	}

}
